/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
/******/ (() => { // webpackBootstrap
/******/ 	var __webpack_modules__ = ({

/***/ "./resources/js/backend-custom.js":
/*!****************************************!*\
  !*** ./resources/js/backend-custom.js ***!
  \****************************************/
/***/ (() => {

eval("function _regeneratorRuntime() { \"use strict\"; /*! regenerator-runtime -- Copyright (c) 2014-present, Facebook, Inc. -- license (MIT): https://github.com/facebook/regenerator/blob/main/LICENSE */ _regeneratorRuntime = function _regeneratorRuntime() { return e; }; var t, e = {}, r = Object.prototype, n = r.hasOwnProperty, o = Object.defineProperty || function (t, e, r) { t[e] = r.value; }, i = \"function\" == typeof Symbol ? Symbol : {}, a = i.iterator || \"@@iterator\", c = i.asyncIterator || \"@@asyncIterator\", u = i.toStringTag || \"@@toStringTag\"; function define(t, e, r) { return Object.defineProperty(t, e, { value: r, enumerable: !0, configurable: !0, writable: !0 }), t[e]; } try { define({}, \"\"); } catch (t) { define = function define(t, e, r) { return t[e] = r; }; } function wrap(t, e, r, n) { var i = e && e.prototype instanceof Generator ? e : Generator, a = Object.create(i.prototype), c = new Context(n || []); return o(a, \"_invoke\", { value: makeInvokeMethod(t, r, c) }), a; } function tryCatch(t, e, r) { try { return { type: \"normal\", arg: t.call(e, r) }; } catch (t) { return { type: \"throw\", arg: t }; } } e.wrap = wrap; var h = \"suspendedStart\", l = \"suspendedYield\", f = \"executing\", s = \"completed\", y = {}; function Generator() {} function GeneratorFunction() {} function GeneratorFunctionPrototype() {} var p = {}; define(p, a, function () { return this; }); var d = Object.getPrototypeOf, v = d && d(d(values([]))); v && v !== r && n.call(v, a) && (p = v); var g = GeneratorFunctionPrototype.prototype = Generator.prototype = Object.create(p); function defineIteratorMethods(t) { [\"next\", \"throw\", \"return\"].forEach(function (e) { define(t, e, function (t) { return this._invoke(e, t); }); }); } function AsyncIterator(t, e) { function invoke(r, o, i, a) { var c = tryCatch(t[r], t, o); if (\"throw\" !== c.type) { var u = c.arg, h = u.value; return h && \"object\" == _typeof(h) && n.call(h, \"__await\") ? e.resolve(h.__await).then(function (t) { invoke(\"next\", t, i, a); }, function (t) { invoke(\"throw\", t, i, a); }) : e.resolve(h).then(function (t) { u.value = t, i(u); }, function (t) { return invoke(\"throw\", t, i, a); }); } a(c.arg); } var r; o(this, \"_invoke\", { value: function value(t, n) { function callInvokeWithMethodAndArg() { return new e(function (e, r) { invoke(t, n, e, r); }); } return r = r ? r.then(callInvokeWithMethodAndArg, callInvokeWithMethodAndArg) : callInvokeWithMethodAndArg(); } }); } function makeInvokeMethod(e, r, n) { var o = h; return function (i, a) { if (o === f) throw new Error(\"Generator is already running\"); if (o === s) { if (\"throw\" === i) throw a; return { value: t, done: !0 }; } for (n.method = i, n.arg = a;;) { var c = n.delegate; if (c) { var u = maybeInvokeDelegate(c, n); if (u) { if (u === y) continue; return u; } } if (\"next\" === n.method) n.sent = n._sent = n.arg;else if (\"throw\" === n.method) { if (o === h) throw o = s, n.arg; n.dispatchException(n.arg); } else \"return\" === n.method && n.abrupt(\"return\", n.arg); o = f; var p = tryCatch(e, r, n); if (\"normal\" === p.type) { if (o = n.done ? s : l, p.arg === y) continue; return { value: p.arg, done: n.done }; } \"throw\" === p.type && (o = s, n.method = \"throw\", n.arg = p.arg); } }; } function maybeInvokeDelegate(e, r) { var n = r.method, o = e.iterator[n]; if (o === t) return r.delegate = null, \"throw\" === n && e.iterator[\"return\"] && (r.method = \"return\", r.arg = t, maybeInvokeDelegate(e, r), \"throw\" === r.method) || \"return\" !== n && (r.method = \"throw\", r.arg = new TypeError(\"The iterator does not provide a '\" + n + \"' method\")), y; var i = tryCatch(o, e.iterator, r.arg); if (\"throw\" === i.type) return r.method = \"throw\", r.arg = i.arg, r.delegate = null, y; var a = i.arg; return a ? a.done ? (r[e.resultName] = a.value, r.next = e.nextLoc, \"return\" !== r.method && (r.method = \"next\", r.arg = t), r.delegate = null, y) : a : (r.method = \"throw\", r.arg = new TypeError(\"iterator result is not an object\"), r.delegate = null, y); } function pushTryEntry(t) { var e = { tryLoc: t[0] }; 1 in t && (e.catchLoc = t[1]), 2 in t && (e.finallyLoc = t[2], e.afterLoc = t[3]), this.tryEntries.push(e); } function resetTryEntry(t) { var e = t.completion || {}; e.type = \"normal\", delete e.arg, t.completion = e; } function Context(t) { this.tryEntries = [{ tryLoc: \"root\" }], t.forEach(pushTryEntry, this), this.reset(!0); } function values(e) { if (e || \"\" === e) { var r = e[a]; if (r) return r.call(e); if (\"function\" == typeof e.next) return e; if (!isNaN(e.length)) { var o = -1, i = function next() { for (; ++o < e.length;) if (n.call(e, o)) return next.value = e[o], next.done = !1, next; return next.value = t, next.done = !0, next; }; return i.next = i; } } throw new TypeError(_typeof(e) + \" is not iterable\"); } return GeneratorFunction.prototype = GeneratorFunctionPrototype, o(g, \"constructor\", { value: GeneratorFunctionPrototype, configurable: !0 }), o(GeneratorFunctionPrototype, \"constructor\", { value: GeneratorFunction, configurable: !0 }), GeneratorFunction.displayName = define(GeneratorFunctionPrototype, u, \"GeneratorFunction\"), e.isGeneratorFunction = function (t) { var e = \"function\" == typeof t && t.constructor; return !!e && (e === GeneratorFunction || \"GeneratorFunction\" === (e.displayName || e.name)); }, e.mark = function (t) { return Object.setPrototypeOf ? Object.setPrototypeOf(t, GeneratorFunctionPrototype) : (t.__proto__ = GeneratorFunctionPrototype, define(t, u, \"GeneratorFunction\")), t.prototype = Object.create(g), t; }, e.awrap = function (t) { return { __await: t }; }, defineIteratorMethods(AsyncIterator.prototype), define(AsyncIterator.prototype, c, function () { return this; }), e.AsyncIterator = AsyncIterator, e.async = function (t, r, n, o, i) { void 0 === i && (i = Promise); var a = new AsyncIterator(wrap(t, r, n, o), i); return e.isGeneratorFunction(r) ? a : a.next().then(function (t) { return t.done ? t.value : a.next(); }); }, defineIteratorMethods(g), define(g, u, \"Generator\"), define(g, a, function () { return this; }), define(g, \"toString\", function () { return \"[object Generator]\"; }), e.keys = function (t) { var e = Object(t), r = []; for (var n in e) r.push(n); return r.reverse(), function next() { for (; r.length;) { var t = r.pop(); if (t in e) return next.value = t, next.done = !1, next; } return next.done = !0, next; }; }, e.values = values, Context.prototype = { constructor: Context, reset: function reset(e) { if (this.prev = 0, this.next = 0, this.sent = this._sent = t, this.done = !1, this.delegate = null, this.method = \"next\", this.arg = t, this.tryEntries.forEach(resetTryEntry), !e) for (var r in this) \"t\" === r.charAt(0) && n.call(this, r) && !isNaN(+r.slice(1)) && (this[r] = t); }, stop: function stop() { this.done = !0; var t = this.tryEntries[0].completion; if (\"throw\" === t.type) throw t.arg; return this.rval; }, dispatchException: function dispatchException(e) { if (this.done) throw e; var r = this; function handle(n, o) { return a.type = \"throw\", a.arg = e, r.next = n, o && (r.method = \"next\", r.arg = t), !!o; } for (var o = this.tryEntries.length - 1; o >= 0; --o) { var i = this.tryEntries[o], a = i.completion; if (\"root\" === i.tryLoc) return handle(\"end\"); if (i.tryLoc <= this.prev) { var c = n.call(i, \"catchLoc\"), u = n.call(i, \"finallyLoc\"); if (c && u) { if (this.prev < i.catchLoc) return handle(i.catchLoc, !0); if (this.prev < i.finallyLoc) return handle(i.finallyLoc); } else if (c) { if (this.prev < i.catchLoc) return handle(i.catchLoc, !0); } else { if (!u) throw new Error(\"try statement without catch or finally\"); if (this.prev < i.finallyLoc) return handle(i.finallyLoc); } } } }, abrupt: function abrupt(t, e) { for (var r = this.tryEntries.length - 1; r >= 0; --r) { var o = this.tryEntries[r]; if (o.tryLoc <= this.prev && n.call(o, \"finallyLoc\") && this.prev < o.finallyLoc) { var i = o; break; } } i && (\"break\" === t || \"continue\" === t) && i.tryLoc <= e && e <= i.finallyLoc && (i = null); var a = i ? i.completion : {}; return a.type = t, a.arg = e, i ? (this.method = \"next\", this.next = i.finallyLoc, y) : this.complete(a); }, complete: function complete(t, e) { if (\"throw\" === t.type) throw t.arg; return \"break\" === t.type || \"continue\" === t.type ? this.next = t.arg : \"return\" === t.type ? (this.rval = this.arg = t.arg, this.method = \"return\", this.next = \"end\") : \"normal\" === t.type && e && (this.next = e), y; }, finish: function finish(t) { for (var e = this.tryEntries.length - 1; e >= 0; --e) { var r = this.tryEntries[e]; if (r.finallyLoc === t) return this.complete(r.completion, r.afterLoc), resetTryEntry(r), y; } }, \"catch\": function _catch(t) { for (var e = this.tryEntries.length - 1; e >= 0; --e) { var r = this.tryEntries[e]; if (r.tryLoc === t) { var n = r.completion; if (\"throw\" === n.type) { var o = n.arg; resetTryEntry(r); } return o; } } throw new Error(\"illegal catch attempt\"); }, delegateYield: function delegateYield(e, r, n) { return this.delegate = { iterator: values(e), resultName: r, nextLoc: n }, \"next\" === this.method && (this.arg = t), y; } }, e; }\nfunction asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }\nfunction _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"next\", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"throw\", err); } _next(undefined); }); }; }\nfunction _typeof(o) { \"@babel/helpers - typeof\"; return _typeof = \"function\" == typeof Symbol && \"symbol\" == typeof Symbol.iterator ? function (o) { return typeof o; } : function (o) { return o && \"function\" == typeof Symbol && o.constructor === Symbol && o !== Symbol.prototype ? \"symbol\" : typeof o; }, _typeof(o); }\n/*\n* Version: 1.1.0\n* Template: Hope-Ui - Responsive Bootstrap 5 Admin Dashboard Template\n* Author: iqonic.design\n* Design and Developed by: iqonic.design\n* NOTE: This file contains the script for initialize & listener Template.\n*/\n/*----------------------------------------------\nIndex Of Script\n------------------------------------------------\n------- Plugin Init --------\n:: Tooltip\n:: Popover\n:: Progress Bar\n:: NoUiSlider\n:: CopyToClipboard\n:: Vanila Datepicker\n:: SliderTab\n:: Data Tables\n:: Active Class for Pricing Table\n------ Functions --------\n:: Loader Init\n:: Resize Plugins\n:: Sidebar Toggle\n:: Back To Top\n------- Listners ---------\n:: DOMContentLoaded\n:: Window Resize\n------------------------------------------------\nIndex Of Script\n----------------------------------------------*/\n(function () {\n  \"use strict\";\n\n  /*------------LoaderInit----------------*/\n  var loaderInit = function loaderInit() {\n    var loader = document.querySelector('.loader');\n    if (loader !== null) {\n      loader.classList.add('animate__animated', 'animate__fadeOut');\n      setTimeout(function () {\n        loader.classList.add('d-none');\n      }, 200);\n    }\n  };\n  if (_typeof($.fn.select2) !== ( true ? \"undefined\" : 0)) {\n    $('.select2').select2();\n    $('.select2-tag').select2({\n      tags: true\n    });\n  }\n  /*----------Sticky-Nav-----------*/\n  window.addEventListener('scroll', function () {\n    var yOffset = document.documentElement.scrollTop;\n    var navbar = document.querySelector(\".navs-sticky\");\n    if (navbar !== null) {\n      if (yOffset >= 100) {\n        navbar.classList.add(\"menu-sticky\");\n      } else {\n        navbar.classList.remove(\"menu-sticky\");\n      }\n    }\n  });\n  /*------------Popover--------------*/\n  var popoverTriggerList = [].slice.call(document.querySelectorAll('[data-bs-toggle=\"popover\"]'));\n  if ((typeof bootstrap === \"undefined\" ? \"undefined\" : _typeof(bootstrap)) !== ( true ? \"undefined\" : 0)) {\n    popoverTriggerList.map(function (popoverTriggerEl) {\n      return new bootstrap.Popover(popoverTriggerEl);\n    });\n  }\n  /*-------------Tooltip--------------------*/\n  if ((typeof bootstrap === \"undefined\" ? \"undefined\" : _typeof(bootstrap)) !== ( true ? \"undefined\" : 0)) {\n    window.tooltipInit = function () {\n      var tooltipTriggerList = [].slice.call(document.querySelectorAll('[data-bs-toggle=\"tooltip\"]'));\n      tooltipTriggerList.map(function (tooltipTriggerEl) {\n        return new bootstrap.Tooltip(tooltipTriggerEl);\n      });\n    };\n    tooltipInit();\n    var sidebarTooltipTriggerList = [].slice.call(document.querySelectorAll('[data-sidebar-toggle=\"tooltip\"]'));\n    sidebarTooltipTriggerList.map(function (tooltipTriggerEl) {\n      return new bootstrap.Tooltip(tooltipTriggerEl);\n    });\n  }\n  /*-------------Progress Bar------------------*/\n  var progressBarInit = function progressBarInit(elem) {\n    var currentValue = elem.getAttribute('aria-valuenow');\n    elem.style.width = '0%';\n    elem.style.transition = 'width 2s';\n    if ((typeof Waypoint === \"undefined\" ? \"undefined\" : _typeof(Waypoint)) !== ( true ? \"undefined\" : 0)) {\n      new Waypoint({\n        element: elem,\n        handler: function handler() {\n          setTimeout(function () {\n            elem.style.width = currentValue + '%';\n          }, 100);\n        },\n        offset: 'bottom-in-view'\n      });\n    }\n  };\n  var customProgressBar = document.querySelectorAll('[data-toggle=\"progress-bar\"]');\n  Array.from(customProgressBar, function (elem) {\n    progressBarInit(elem);\n  });\n  /*---------------noUiSlider-------------------*/\n  function createSlider(elem) {\n    return noUiSlider.create(elem, {\n      start: [50, 2000],\n      connect: true,\n      range: {\n        'min': 0,\n        '10%': [50, 50],\n        'max': 2000\n      }\n    });\n  }\n  var rangeSlider = document.querySelectorAll('.range-slider');\n  Array.from(rangeSlider, function (elem) {\n    if ((typeof noUiSlider === \"undefined\" ? \"undefined\" : _typeof(noUiSlider)) !== ( true ? \"undefined\" : 0)) {\n      if (elem.getAttribute('id') !== '' && elem.getAttribute('id') !== null) {\n        window[elem.getAttribute('id')] = createSlider(elem);\n      } else {\n        createSlider(elem);\n      }\n    }\n  });\n  var slider = document.querySelectorAll('.slider');\n  Array.from(slider, function (elem) {\n    if ((typeof noUiSlider === \"undefined\" ? \"undefined\" : _typeof(noUiSlider)) !== ( true ? \"undefined\" : 0)) {\n      noUiSlider.create(elem, {\n        start: 50,\n        connect: [true, false],\n        range: {\n          'min': 0,\n          'max': 100\n        }\n      });\n    }\n  });\n  /*------------Copy To Clipboard---------------*/\n  var copy = document.querySelectorAll('[data-toggle=\"copy\"]');\n  if (_typeof(copy) !== ( true ? \"undefined\" : 0)) {\n    Array.from(copy, function (elem) {\n      elem.addEventListener('click', function (e) {\n        var target = elem.getAttribute(\"data-copy-target\");\n        var value = elem.getAttribute(\"data-copy-value\");\n        var container = document.querySelector(target);\n        if (container !== undefined && container !== null) {\n          if (container.value !== undefined && container.value !== null) {\n            value = container.value;\n          } else {\n            value = container.innerHTML;\n          }\n        }\n        if (value !== null) {\n          var _elem = document.createElement(\"textarea\");\n          document.querySelector(\"body\").appendChild(_elem);\n          _elem.value = value;\n          _elem.select();\n          document.execCommand(\"copy\");\n          _elem.remove();\n        }\n        elem.setAttribute('data-bs-original-title', 'Copied!');\n        var btn_tooltip = bootstrap.Tooltip.getInstance(elem);\n        btn_tooltip.show();\n        // reset the tooltip title\n        elem.setAttribute('data-bs-original-title', 'Copy');\n        setTimeout(function () {\n          btn_tooltip.hide();\n        }, 500);\n      });\n    });\n  }\n  /*------------Minus-plus--------------*/\n  var plusBtns = document.querySelectorAll('.iq-quantity-plus');\n  var minusBtns = document.querySelectorAll('.iq-quantity-minus');\n  var updateQtyBtn = function updateQtyBtn(elem, value) {\n    var oldValue = elem.closest('[data-qty=\"btn\"]').querySelector('[data-qty=\"input\"]').value;\n    var newValue = Number(oldValue) + Number(value);\n    if (newValue >= 1) {\n      elem.closest('[data-qty=\"btn\"]').querySelector('[data-qty=\"input\"]').value = newValue;\n    }\n  };\n  Array.from(plusBtns, function (elem) {\n    elem.addEventListener('click', function (e) {\n      updateQtyBtn(elem, 1);\n    });\n  });\n  Array.from(minusBtns, function (elem) {\n    elem.addEventListener('click', function (e) {\n      updateQtyBtn(elem, -1);\n    });\n  });\n  /*------------Flatpickr--------------*/\n  var date_flatpickr = document.querySelectorAll('.date_flatpicker');\n  Array.from(date_flatpickr, function (elem) {\n    if ((typeof flatpickr === \"undefined\" ? \"undefined\" : _typeof(flatpickr)) !== ( true ? \"undefined\" : 0)) {\n      flatpickr(elem, {\n        minDate: \"today\",\n        dateFormat: \"Y-m-d\"\n      });\n    }\n  });\n  /*----------Range Flatpickr--------------*/\n  var range_flatpicker = document.querySelectorAll('.range_flatpicker');\n  Array.from(range_flatpicker, function (elem) {\n    if ((typeof flatpickr === \"undefined\" ? \"undefined\" : _typeof(flatpickr)) !== ( true ? \"undefined\" : 0)) {\n      flatpickr(elem, {\n        mode: \"range\",\n        minDate: \"today\",\n        dateFormat: \"Y-m-d\"\n      });\n    }\n  });\n  /*------------Wrap Flatpickr---------------*/\n  var wrap_flatpicker = document.querySelectorAll('.wrap_flatpicker');\n  Array.from(wrap_flatpicker, function (elem) {\n    if ((typeof flatpickr === \"undefined\" ? \"undefined\" : _typeof(flatpickr)) !== ( true ? \"undefined\" : 0)) {\n      flatpickr(elem, {\n        wrap: true,\n        minDate: \"today\",\n        dateFormat: \"Y-m-d\"\n      });\n    }\n  });\n  /*-------------Time Flatpickr---------------*/\n  var time_flatpickr = document.querySelectorAll('.time_flatpicker');\n  Array.from(time_flatpickr, function (elem) {\n    if ((typeof flatpickr === \"undefined\" ? \"undefined\" : _typeof(flatpickr)) !== ( true ? \"undefined\" : 0)) {\n      flatpickr(elem, {\n        enableTime: true,\n        noCalendar: true,\n        dateFormat: \"H:i\"\n      });\n    }\n  });\n  /*-------------Inline Flatpickr-----------------*/\n  var inline_flatpickr = document.querySelectorAll('.inline_flatpickr');\n  Array.from(inline_flatpickr, function (elem) {\n    if ((typeof flatpickr === \"undefined\" ? \"undefined\" : _typeof(flatpickr)) !== ( true ? \"undefined\" : 0)) {\n      flatpickr(elem, {\n        inline: true,\n        minDate: \"today\",\n        dateFormat: \"Y-m-d\"\n      });\n    }\n  });\n\n  /*-------------CounterUp 2--------------*/\n  if (window.counterUp !== undefined) {\n    var counterUp = window.counterUp[\"default\"];\n    var counterUp2 = document.querySelectorAll('.counter');\n    Array.from(counterUp2, function (el) {\n      if ((typeof Waypoint === \"undefined\" ? \"undefined\" : _typeof(Waypoint)) !== ( true ? \"undefined\" : 0)) {\n        var waypoint = new Waypoint({\n          element: el,\n          handler: function handler() {\n            counterUp(el, {\n              duration: 1000,\n              delay: 10\n            });\n            this.destroy();\n          },\n          offset: \"bottom-in-view\"\n        });\n      }\n    });\n  }\n\n  /*----------------SliderTab------------------*/\n  Array.from(document.querySelectorAll('[data-toggle=\"slider-tab\"]'), function (elem) {\n    if ((typeof SliderTab === \"undefined\" ? \"undefined\" : _typeof(SliderTab)) !== ( true ? \"undefined\" : 0)) {\n      new SliderTab(elem);\n    }\n  });\n  var Scrollbar;\n  if (_typeof(Scrollbar) !== _typeof(null)) {\n    if (document.querySelectorAll(\".data-scrollbar\").length) {\n      Scrollbar = window.Scrollbar;\n      Scrollbar.init(document.querySelector('.data-scrollbar'), {\n        continuousScrolling: false,\n        alwaysShowTracks: false\n      });\n    }\n  }\n  /*-------------Data tables---------------*/\n  if ($.fn.DataTable) {\n    // Bootstrap DataTable\n    if ($('[data-toggle=\"data-table\"]').length) {\n      $('[data-toggle=\"data-table\"]').DataTable({\n        \"autoWidth\": false,\n        \"dom\": '<\"row align-items-center\"<\"col-md-6\" l><\"col-md-6\" f>><\"table-responsive my-3\" rt><\"row align-items-center\" <\"col-md-6\" i><\"col-md-6\" p>><\"clear\">'\n      });\n    }\n    // Column hidden datatable\n    if ($('[data-toggle=\"data-table-column-hidden\"]').length) {\n      var hiddentable = $('[data-toggle=\"data-table-column-hidden\"]').DataTable({});\n      $('a.toggle-vis').on('click', function (e) {\n        e.preventDefault();\n        var column = hiddentable.column($(this).attr('data-column'));\n        column.visible(!column.visible());\n      });\n    }\n    // Column filter datatable\n    if ($('[data-toggle=\"data-table-column-filter\"]').length) {\n      $('[data-toggle=\"data-table-column-filter\"] tfoot th').each(function () {\n        var title = $(this).attr('title');\n        $(this).html(\"<td><input type=\\\"text\\\" class=\\\"form-control form-control-sm\\\" placeholder=\\\"\".concat(title, \"\\\" /></td>\"));\n      });\n      $('[data-toggle=\"data-table-column-filter\"]').DataTable({\n        initComplete: function initComplete() {\n          this.api().columns().every(function () {\n            var that = this;\n            $('input', this.footer()).on('keyup change clear', function () {\n              if (that.search() !== this.value) {\n                that.search(this.value).draw();\n              }\n            });\n          });\n        }\n      });\n    }\n    ;\n    // Multilanguage datatable\n    if ($('[data-toggle=\"data-table-multi-language\"]').length) {\n      var languageSelect = function languageSelect() {\n        return Array.from(document.querySelector('#langSelector').options).filter(function (option) {\n          return option.selected;\n        }).map(function (option) {\n          return option.getAttribute('data-path');\n        });\n      };\n      var dataTableInit = function dataTableInit() {\n        $('[data-toggle=\"data-table-multi-language\"]').DataTable({\n          \"language\": {\n            \"url\": languageSelect()\n          }\n        });\n      };\n      dataTableInit();\n      document.querySelector('#langSelector').addEventListener('change', function (e) {\n        $('[data-toggle=\"data-table-multi-language\"]').dataTable().fnDestroy();\n        dataTableInit();\n      });\n    }\n    ;\n  }\n  ;\n\n  /*--------------Active Class for Pricing Table------------------------*/\n  var tableTh = document.querySelectorAll('#my-table tr th');\n  var tableTd = document.querySelectorAll('#my-table td');\n  if (tableTh !== null) {\n    Array.from(tableTh, function (elem) {\n      elem.addEventListener('click', function (e) {\n        Array.from(tableTh, function (th) {\n          if (th.children.length) {\n            th.children[0].classList.remove('active');\n          }\n        });\n        elem.children[0].classList.add('active');\n        Array.from(tableTd, function (td) {\n          return td.classList.remove('active');\n        });\n        var col = Array.prototype.indexOf.call(document.querySelector('#my-table tr').children, elem);\n        var tdIcons = document.querySelectorAll(\"#my-table tr td:nth-child(\" + parseInt(col + 1) + \")\");\n        Array.from(tdIcons, function (td) {\n          return td.classList.add('active');\n        });\n      });\n    });\n  }\n  /*------------Resize Plugins--------------*/\n  var resizePlugins = function resizePlugins() {\n    // For sidebar-mini & responsive\n    var tabs = document.querySelectorAll('.nav');\n    var sidebarResponsive = document.querySelector('[data-sidebar=\"responsive\"]');\n    if (window.innerWidth < 1025) {\n      Array.from(tabs, function (elem) {\n        if (!elem.classList.contains('flex-column') && elem.classList.contains('nav-tabs') && elem.classList.contains('nav-pills')) {\n          elem.classList.add('flex-column', 'on-resize');\n        }\n      });\n      if (sidebarResponsive !== null) {\n        if (!sidebarResponsive.classList.contains('sidebar-mini')) {\n          sidebarResponsive.classList.add('sidebar-mini', 'on-resize');\n        }\n      }\n    } else {\n      Array.from(tabs, function (elem) {\n        if (elem.classList.contains('on-resize')) {\n          elem.classList.remove('flex-column', 'on-resize');\n        }\n      });\n      if (sidebarResponsive !== null) {\n        if (sidebarResponsive.classList.contains('sidebar-mini') && sidebarResponsive.classList.contains('on-resize')) {\n          sidebarResponsive.classList.remove('sidebar-mini', 'on-resize');\n        }\n      }\n    }\n  };\n  /*-------------Sidebar Toggle-----------------*/\n  function updateSidebarType() {\n    if ((typeof IQSetting === \"undefined\" ? \"undefined\" : _typeof(IQSetting)) !== ( true ? \"undefined\" : 0)) {\n      var sidebarType = IQSetting.options.setting.sidebar_type.value;\n      var newTypes = sidebarType;\n      if (sidebarType.includes('sidebar-mini')) {\n        var indexOf = newTypes.findIndex(function (x) {\n          return x == 'sidebar-mini';\n        });\n        newTypes.splice(indexOf, 1);\n      } else {\n        newTypes.push('sidebar-mini');\n      }\n      IQSetting.sidebar_type(newTypes);\n    }\n  }\n  var sidebarToggle = function sidebarToggle(elem) {\n    elem.addEventListener('click', function (e) {\n      var sidebar = document.querySelector('.sidebar');\n      if (sidebar.classList.contains('sidebar-mini')) {\n        sidebar.classList.remove('sidebar-mini');\n        updateSidebarType();\n      } else {\n        sidebar.classList.add('sidebar-mini');\n        updateSidebarType();\n      }\n    });\n  };\n  var sidebarToggleBtn = document.querySelectorAll('[data-toggle=\"sidebar\"]');\n  Array.from(sidebarToggleBtn, function (sidebarBtn) {\n    sidebarToggle(sidebarBtn);\n  });\n\n  /*----------------Back To Top--------------------*/\n  var backToTop = document.getElementById(\"back-to-top\");\n  if (backToTop !== null && backToTop !== undefined) {\n    document.getElementById(\"back-to-top\").classList.add(\"animate__animated\", \"animate__fadeOut\");\n    window.addEventListener('scroll', function (e) {\n      if (document.documentElement.scrollTop > 250) {\n        document.getElementById(\"back-to-top\").classList.remove(\"animate__fadeOut\");\n        document.getElementById(\"back-to-top\").classList.add(\"animate__fadeIn\");\n      } else {\n        document.getElementById(\"back-to-top\").classList.remove(\"animate__fadeIn\");\n        document.getElementById(\"back-to-top\").classList.add(\"animate__fadeOut\");\n      }\n    });\n    // scroll body to 0px on click\n    document.querySelector('#top').addEventListener('click', function (e) {\n      e.preventDefault();\n      window.scrollTo({\n        top: 0,\n        behavior: 'smooth'\n      });\n    });\n  }\n  /*------------DOMContentLoaded--------------*/\n  document.addEventListener('DOMContentLoaded', function (event) {\n    resizePlugins();\n    loaderInit();\n  });\n  /*------------Window Resize------------------*/\n  window.addEventListener('resize', function (event) {\n    resizePlugins();\n  });\n  /*--------DropDown--------*/\n\n  function darken_screen(yesno) {\n    if (yesno == true) {\n      if (document.querySelector('.screen-darken') !== null) {\n        document.querySelector('.screen-darken').classList.add('active');\n      }\n    } else if (yesno == false) {\n      if (document.querySelector('.screen-darken') !== null) {\n        document.querySelector('.screen-darken').classList.remove('active');\n      }\n    }\n  }\n  function close_offcanvas() {\n    darken_screen(false);\n    if (document.querySelector('.mobile-offcanvas.show') !== null) {\n      document.querySelector('.mobile-offcanvas.show').classList.remove('show');\n      document.body.classList.remove('offcanvas-active');\n    }\n  }\n  function show_offcanvas(offcanvas_id) {\n    darken_screen(true);\n    if (document.getElementById(offcanvas_id) !== null) {\n      document.getElementById(offcanvas_id).classList.add('show');\n      document.body.classList.add('offcanvas-active');\n    }\n  }\n  document.addEventListener(\"DOMContentLoaded\", function () {\n    document.querySelectorAll('[data-trigger]').forEach(function (everyelement) {\n      var offcanvas_id = everyelement.getAttribute('data-trigger');\n      everyelement.addEventListener('click', function (e) {\n        e.preventDefault();\n        show_offcanvas(offcanvas_id);\n      });\n    });\n    if (document.querySelectorAll('.btn-close')) {\n      document.querySelectorAll('.btn-close').forEach(function (everybutton) {\n        everybutton.addEventListener('click', function (e) {\n          close_offcanvas();\n        });\n      });\n    }\n    if (document.querySelector('.screen-darken')) {\n      document.querySelector('.screen-darken').addEventListener('click', function (event) {\n        close_offcanvas();\n      });\n    }\n  });\n  if (document.querySelector('#navbarSideCollapse')) {\n    document.querySelector('#navbarSideCollapse').addEventListener('click', function () {\n      document.querySelector('.offcanvas-collapse').classList.toggle('open');\n    });\n  }\n  /*---------------Form Validation--------------------*/\n  // Example starter JavaScript for disabling form submissions if there are invalid fields\n  window.addEventListener('load', function () {\n    // Fetch all the forms we want to apply custom Bootstrap validation styles to\n    var forms = document.getElementsByClassName('needs-validation');\n    // Loop over them and prevent submission\n    var validation = Array.prototype.filter.call(forms, function (form) {\n      form.addEventListener('submit', function (event) {\n        if (form.checkValidity() === false) {\n          event.preventDefault();\n          event.stopPropagation();\n        }\n        form.classList.add('was-validated');\n      }, false);\n    });\n  }, false);\n  $(document).on('click', '.btn', function (e) {\n    $(this).trigger('blur');\n  });\n  // Snackbar Message\n  var snackbarMessage = function snackbarMessage() {\n    var PRIMARY_COLOR = window.getComputedStyle(document.querySelector('html')).getPropertyValue('--bs-success').trim();\n    var DANGER_COLOR = window.getComputedStyle(document.querySelector('html')).getPropertyValue('--bs-danger').trim();\n    var successSnackbar = function successSnackbar(message) {\n      Snackbar.show({\n        text: message,\n        pos: 'bottom-left',\n        actionTextColor: PRIMARY_COLOR,\n        duration: 2500\n      });\n    };\n    window.successSnackbar = successSnackbar;\n    var errorSnackbar = function errorSnackbar(message) {\n      Snackbar.show({\n        text: message,\n        pos: 'bottom-left',\n        actionTextColor: '#FFFFFF',\n        backgroundColor: DANGER_COLOR,\n        duration: 2500\n      });\n    };\n    window.errorSnackbar = errorSnackbar;\n  };\n  snackbarMessage();\n\n  /*\n  Exemples :\n  <a href=\"posts/2\" data-method=\"delete\" data-token=\"{{csrf_token()}}\">\n  - Or, request confirmation in the process -\n  <a href=\"posts/2\" data-method=\"delete\" data-token=\"{{csrf_token()}}\" data-confirm=\"Are you sure?\">\n  */\n\n  window.laravel = {\n    initialize: function initialize() {\n      this.methodLinks = $('[data-method]');\n      this.token = $('[data-token]');\n      this.registerEvents();\n      window.tooltipInit();\n      if ($(\"#quick-action-type\").val() == \"\") {\n        $(\"#quick-action-apply\").attr(\"disabled\", true);\n      }\n    },\n    registerEvents: function registerEvents() {\n      this.methodLinks.on('click', this.handleMethod);\n    },\n    ajaxSubmitForm: function ajaxSubmitForm(e) {\n      var URL = $(this).attr('action');\n      var DATA = $(this).serialize();\n      var __this = $(this);\n      e.preventDefault();\n      $.ajax({\n        type: \"POST\",\n        url: URL,\n        data: DATA,\n        dataType: 'json',\n        success: function success(res) {\n          if (res.status) {\n            // window.successSnackbar(res.message)\n            Swal.fire({\n              title: 'Deleted',\n              text: res.message,\n              icon: \"success\"\n            });\n            renderedDataTable.ajax.reload(null, false);\n            __this.remove();\n          } else {\n            if (res.message) {\n              Swal.fire({\n                title: 'Error',\n                text: res.message,\n                icon: \"error\"\n              });\n              __this.remove();\n            }\n          }\n        },\n        error: function error(err) {\n          var wrapper = document.createElement('div');\n          wrapper.innerHTML = err.responseText;\n          Swal.fire({\n            title: err.statusText,\n            text: wrapper.innerHTML,\n            icon: \"error\"\n          });\n          __this.remove();\n        }\n      });\n    },\n    handleMethod: function handleMethod(e) {\n      e.preventDefault();\n      var link = $(this);\n      var httpMethod = link.data('method').toUpperCase();\n      var form;\n\n      // If the data-method attribute is not PUT, PATCH or DELETE,\n      // Then we don't know what to do. Just ignore.\n      if ($.inArray(httpMethod, ['PUT', 'DELETE', 'PATCH']) === -1) {\n        return;\n      }\n\n      // Allow user to optionally provide data-confirm=\"Are you sure?\"\n      if (link.data('confirm')) {\n        laravel.verifyConfirm(link).then(function (res) {\n          if (res.isConfirmed) {\n            var formID = 'form-' + link.attr('id');\n            form = laravel.createForm(link, formID);\n            if (link.data('type') == 'ajax') {\n              $('#' + formID).on('submit', laravel.ajaxSubmitForm);\n            }\n            form.submit();\n          } else {\n            return false;\n          }\n        });\n      }\n    },\n    verifyConfirm: function () {\n      var _verifyConfirm = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee(link) {\n        return _regeneratorRuntime().wrap(function _callee$(_context) {\n          while (1) switch (_context.prev = _context.next) {\n            case 0:\n              _context.next = 2;\n              return Swal.fire({\n                title: link.data('confirm'),\n                icon: 'question',\n                // iconColor:'primary',\n                showCancelButton: true,\n                confirmButtonColor: '#d33',\n                cancelButtonColor: '#858482',\n                confirmButtonText: 'Yes, delete it!'\n              }).then(function (result) {\n                return result;\n              });\n            case 2:\n              return _context.abrupt(\"return\", _context.sent);\n            case 3:\n            case \"end\":\n              return _context.stop();\n          }\n        }, _callee);\n      }));\n      function verifyConfirm(_x) {\n        return _verifyConfirm.apply(this, arguments);\n      }\n      return verifyConfirm;\n    }(),\n    createForm: function createForm(link, formID) {\n      var form = $('<form>', {\n        'method': 'POST',\n        'id': formID,\n        'action': link.attr('href')\n      });\n      var token = $('<input>', {\n        'type': 'hidden',\n        'name': '_token',\n        'value': link.data('token')\n      });\n      var hiddenInput = $('<input>', {\n        'name': '_method',\n        'type': 'hidden',\n        'value': link.data('method')\n      });\n      return form.append(token, hiddenInput).appendTo('body');\n    }\n  };\n})();//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./resources/js/backend-custom.js\n");

/***/ })

/******/ 	});
/************************************************************************/
/******/ 	
/******/ 	// startup
/******/ 	// Load entry module and return exports
/******/ 	// This entry module can't be inlined because the eval-source-map devtool is used.
/******/ 	var __webpack_exports__ = {};
/******/ 	__webpack_modules__["./resources/js/backend-custom.js"]();
/******/ 	
/******/ })()
;